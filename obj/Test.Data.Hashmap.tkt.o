{"namespace":"Test.Data.Hashmap","objcode":[[10,["emptyHashmapAssertions",[[6,[[2,"Spec.Core.description"],[3,1],[4],[7,[[2,"Data.String.string"],[1,"Fresh hashmap"],[4]]],[4],[5,"it"],[7,[[2,"Data.String.string"],[1,"expect (newHashmap empty) to be true"],[4]]],[4],[7,[[2,"Spec.Core.expect"],[2,"Data.Hashmap.newHashmap"],[5,"empty"],[4],[5,"toBe"],[7,[[2,"Data.Boolean.true"]]],[4]]],[4],[5,"it"],[7,[[2,"Data.String.string"],[1,"expect (newHashmap find 1) to be none"],[4]]],[4],[7,[[2,"Spec.Core.expect"],[2,"Data.Hashmap.newHashmap"],[5,"find"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4],[5,"present"],[4],[5,"toBe"],[7,[[2,"Data.Boolean.false"]]],[4]]],[4],[13,"done"]]]]]],[10,["notEmptyHashmapAssertions",[[6,[[2,"Spec.Core.description"],[3,1],[4],[7,[[2,"Data.String.string"],[1,"Managin hashmap"],[4]]],[4],[5,"it"],[7,[[2,"Data.String.string"],[1,"expect (newHashmap add 1 2 empty) to be false"],[4]]],[4],[7,[[2,"Spec.Core.expect"],[2,"Data.Hashmap.newHashmap"],[5,"add"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4],[7,[[2,"Data.Number.number"],[1,2],[4]]],[4],[5,"empty"],[4],[5,"toBe"],[7,[[2,"Data.Boolean.false"]]],[4]]],[4],[5,"it"],[7,[[2,"Data.String.string"],[1,"expect (newHashmap add 1 2 find 1) to be (some 2)"],[4]]],[4],[7,[[2,"Spec.Core.expect"],[7,[[2,"Data.Hashmap.newHashmap"],[5,"add"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4],[7,[[2,"Data.Number.number"],[1,2],[4]]],[4],[5,"find"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4],[5,"fold"],[7,[[2,"Data.Number.-"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4]]],[4],[6,[[3,2],[14]]],[4]]],[4],[5,"toBe"],[7,[[2,"Data.Number.number"],[1,2],[4]]],[4]]],[4],[5,"it"],[7,[[2,"Data.String.string"],[1,"expect (newHashmap add 1 2 add 1 3 find 1) to be (some 3)"],[4]]],[4],[7,[[2,"Spec.Core.expect"],[7,[[2,"Data.Hashmap.newHashmap"],[5,"add"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4],[7,[[2,"Data.Number.number"],[1,2],[4]]],[4],[5,"add"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4],[7,[[2,"Data.Number.number"],[1,3],[4]]],[4],[5,"find"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4],[5,"fold"],[7,[[2,"Data.Number.-"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4]]],[4],[6,[[3,2],[14]]],[4]]],[4],[5,"toBe"],[7,[[2,"Data.Number.number"],[1,3],[4]]],[4]]],[4],[5,"it"],[7,[[2,"Data.String.string"],[1,"expect (newHashmap add 1 2 remove 1 find 1) to be (none)"],[4]]],[4],[7,[[2,"Spec.Core.expect"],[2,"Data.Hashmap.newHashmap"],[5,"add"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4],[7,[[2,"Data.Number.number"],[1,2],[4]]],[4],[5,"remove"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4],[5,"find"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4],[5,"present"],[4],[5,"toBe"],[7,[[2,"Data.Boolean.false"]]],[4]]],[4],[5,"it"],[7,[[2,"Data.String.string"],[1,"expect (newHashmap add 1 2 add 1 3 remove 1 find 1) to be (none)"],[4]]],[4],[7,[[2,"Spec.Core.expect"],[2,"Data.Hashmap.newHashmap"],[5,"add"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4],[7,[[2,"Data.Number.number"],[1,2],[4]]],[4],[5,"add"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4],[7,[[2,"Data.Number.number"],[1,3],[4]]],[4],[5,"remove"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4],[5,"find"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4],[5,"present"],[4],[5,"toBe"],[7,[[2,"Data.Boolean.false"]]],[4]]],[4],[13,"done"]]]]]],[10,["hashmapBuilderAssertions",[[6,[[2,"Spec.Core.description"],[3,1],[4],[7,[[2,"Data.String.string"],[1,"Building hashmap"],[4]]],[4],[5,"it"],[7,[[2,"Data.String.string"],[1,"expect (Hashmap[1=>2] empty) to be false"],[4]]],[4],[7,[[2,"Spec.Core.expect"],[2,"Data.Hashmap.Hashmap"],[5,"["],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4],[5,"=>"],[7,[[2,"Data.Number.number"],[1,2],[4]]],[4],[5,"]"],[5,"empty"],[4],[5,"toBe"],[7,[[2,"Data.Boolean.false"]]],[4]]],[4],[5,"it"],[7,[[2,"Data.String.string"],[1,"expect (Hashmap[1=>2] find 1) to be (some 2)"],[4]]],[4],[7,[[2,"Spec.Core.expect"],[7,[[2,"Data.Hashmap.Hashmap"],[5,"["],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4],[5,"=>"],[7,[[2,"Data.Number.number"],[1,2],[4]]],[4],[5,"]"],[5,"find"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4],[5,"fold"],[7,[[2,"Data.Number.-"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4]]],[4],[6,[[3,2],[14]]],[4]]],[4],[5,"toBe"],[7,[[2,"Data.Number.number"],[1,2],[4]]],[4]]],[4],[5,"it"],[7,[[2,"Data.String.string"],[1,"expect (Hashmap[1=>2;1=>3] find 1) to be (some 3)"],[4]]],[4],[7,[[2,"Spec.Core.expect"],[7,[[2,"Data.Hashmap.Hashmap"],[5,"["],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4],[5,"=>"],[7,[[2,"Data.Number.number"],[1,2],[4]]],[4],[5,";"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4],[5,"=>"],[7,[[2,"Data.Number.number"],[1,3],[4]]],[4],[5,"]"],[5,"find"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4],[5,"fold"],[7,[[2,"Data.Number.-"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4]]],[4],[6,[[3,2],[14]]],[4]]],[4],[5,"toBe"],[7,[[2,"Data.Number.number"],[1,3],[4]]],[4]]],[4],[5,"it"],[7,[[2,"Data.String.string"],[1,"expect (Hashmap[1=>2] remove 1 find 1) to be (none)"],[4]]],[4],[7,[[2,"Spec.Core.expect"],[2,"Data.Hashmap.Hashmap"],[5,"["],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4],[5,"=>"],[7,[[2,"Data.Number.number"],[1,2],[4]]],[4],[5,"]"],[5,"remove"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4],[5,"find"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4],[5,"present"],[4],[5,"toBe"],[7,[[2,"Data.Boolean.false"]]],[4]]],[4],[5,"it"],[7,[[2,"Data.String.string"],[1,"expect (Hashmap[1=>2;1=>3] remove 1 find 1) to be (none)"],[4]]],[4],[7,[[2,"Spec.Core.expect"],[2,"Data.Hashmap.Hashmap"],[5,"["],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4],[5,"=>"],[7,[[2,"Data.Number.number"],[1,2],[4]]],[4],[5,";"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4],[5,"=>"],[7,[[2,"Data.Number.number"],[1,3],[4]]],[4],[5,"]"],[5,"remove"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4],[5,"find"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4],[5,"present"],[4],[5,"toBe"],[7,[[2,"Data.Boolean.false"]]],[4]]],[4],[13,"done"]]]]]],[10,["testSuite",[[6,[[2,"Lang.Do.do"],[7,[[2,"Data.List.List"],[5,"["],[7,[[2,"Test.Data.Hashmap.emptyHashmapAssertions"]]],[4],[5,";"],[7,[[2,"Test.Data.Hashmap.notEmptyHashmapAssertions"]]],[4],[5,";"],[7,[[2,"Test.Data.Hashmap.hashmapBuilderAssertions"]]],[4],[5,"]"],[5,"each"],[6,[[3,2],[3,1],[12]]],[4]]],[4],[5,"return"],[7,[[2,"Data.Unit.unit"]]],[12]]]]]]],"main":[[[2,"Test.Data.Hashmap.testSuite"],[7,[[2,"Spec.Logger.Console.consoleLogger"]]],[4]]]}