{"namespace":"Test.Data.Array","objcode":[[10,["sequenceAssertions",[[6,[[2,"Spec.Core.description"],[3,1],[4],[7,[[2,"Data.String.string"],[1,"Array as a sequence"],[4]]],[4],[5,"it"],[7,[[2,"Data.String.string"],[1,"expect (emptyArray 0 isEmpty) to be true"],[4]]],[4],[7,[[2,"Spec.Core.expect"],[2,"Data.Array.emptyArray"],[7,[[2,"Data.Number.number"],[1,0],[4]]],[4],[5,"isEmpty"],[4],[5,"toBe"],[7,[[2,"Data.Boolean.true"]]],[4]]],[4],[5,"it"],[7,[[2,"Data.String.string"],[1,"expect (emptyArray 1 isEmpty) to be false"],[4]]],[4],[7,[[2,"Spec.Core.expect"],[2,"Data.Array.emptyArray"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4],[5,"isEmpty"],[4],[5,"toBe"],[7,[[2,"Data.Boolean.false"]]],[4]]],[4],[5,"it"],[7,[[2,"Data.String.string"],[1,"expect (emptyArray 1 isDefinedAt 0) to be false"],[4]]],[4],[7,[[2,"Spec.Core.expect"],[7,[[2,"Data.Array.emptyArray"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4],[5,"isDefinedAt"],[7,[[2,"Data.Number.number"],[1,0],[4]]],[4]]],[4],[5,"toBe"],[7,[[2,"Data.Boolean.false"]]],[4]]],[4],[5,"it"],[7,[[2,"Data.String.string"],[1,"expect (emptyArray 1 set 0 1 isDefinedAt 0) to be true"],[4]]],[4],[7,[[2,"Spec.Core.expect"],[7,[[2,"Data.Array.emptyArray"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4],[5,"set"],[7,[[2,"Data.Number.number"],[1,0],[4]]],[4],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4],[5,"isDefinedAt"],[7,[[2,"Data.Number.number"],[1,0],[4]]],[4]]],[4],[5,"toBe"],[7,[[2,"Data.Boolean.true"]]],[4]]],[4],[5,"it"],[7,[[2,"Data.String.string"],[1,"expect (emptyArray 1 indexOf 1) to be none"],[4]]],[4],[7,[[2,"Spec.Core.expect"],[7,[[2,"Data.Array.emptyArray"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4],[5,"indexOf"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4],[5,"fold"],[7,[[2,"Data.Number.-"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4]]],[4],[6,[[3,2],[14]]],[4]]],[4],[5,"toBe"],[7,[[2,"Data.Number.-"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4]]],[4]]],[4],[5,"it"],[7,[[2,"Data.String.string"],[1,"expect (emptyArray 1 set 0 1 indexOf 1) to be (some 0)"],[4]]],[4],[7,[[2,"Spec.Core.expect"],[7,[[2,"Data.Array.emptyArray"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4],[5,"set"],[7,[[2,"Data.Number.number"],[1,0],[4]]],[4],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4],[5,"indexOf"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4],[5,"fold"],[7,[[2,"Data.Number.-"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4]]],[4],[6,[[3,2],[14]]],[4]]],[4],[5,"toBe"],[7,[[2,"Data.Number.number"],[1,0],[4]]],[4]]],[4],[5,"it"],[7,[[2,"Data.String.string"],[1,"expect (emptyArray 2 set 0 1 set 1 1 lastIndexOf 1) to be (some 1)"],[4]]],[4],[7,[[2,"Spec.Core.expect"],[7,[[2,"Data.Array.emptyArray"],[7,[[2,"Data.Number.number"],[1,2],[4]]],[4],[5,"set"],[7,[[2,"Data.Number.number"],[1,0],[4]]],[4],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4],[5,"set"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4],[5,"lastIndexOf"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4],[5,"fold"],[7,[[2,"Data.Number.-"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4]]],[4],[6,[[3,2],[14]]],[4]]],[4],[5,"toBe"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4]]],[4],[5,"it"],[7,[[2,"Data.String.string"],[1,"expect (emptyArray 2 lastIndexOf 1) to be none"],[4]]],[4],[7,[[2,"Spec.Core.expect"],[7,[[2,"Data.Array.emptyArray"],[7,[[2,"Data.Number.number"],[1,2],[4]]],[4],[5,"lastIndexOf"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4],[5,"fold"],[7,[[2,"Data.Number.-"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4]]],[4],[6,[[3,2],[14]]],[4]]],[4],[5,"toBe"],[7,[[2,"Data.Number.-"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4]]],[4]]],[4],[5,"it"],[7,[[2,"Data.String.string"],[1,"expect (emptyArray 0 length) to be 0"],[4]]],[4],[7,[[2,"Spec.Core.expect"],[2,"Data.Array.emptyArray"],[7,[[2,"Data.Number.number"],[1,0],[4]]],[4],[5,"length"],[4],[5,"toBe"],[7,[[2,"Data.Number.number"],[1,0],[4]]],[4]]],[4],[5,"it"],[7,[[2,"Data.String.string"],[1,"expect (emptyArray 1 length) to be 1"],[4]]],[4],[7,[[2,"Spec.Core.expect"],[2,"Data.Array.emptyArray"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4],[5,"length"],[4],[5,"toBe"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4]]],[4],[5,"it"],[7,[[2,"Data.String.string"],[1,"expect (emptyArray 1 get 0) to be none"],[4]]],[4],[7,[[2,"Spec.Core.expect"],[7,[[2,"Data.Array.emptyArray"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4],[5,"get"],[7,[[2,"Data.Number.number"],[1,0],[4]]],[4],[5,"fold"],[7,[[2,"Data.Number.-"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4]]],[4],[6,[[3,2],[14]]],[4]]],[4],[5,"toBe"],[7,[[2,"Data.Number.-"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4]]],[4]]],[4],[5,"it"],[7,[[2,"Data.String.string"],[1,"expect (emptyArray 1 set 0 1 get 0) to be (some 1)"],[4]]],[4],[7,[[2,"Spec.Core.expect"],[7,[[2,"Data.Array.emptyArray"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4],[5,"set"],[7,[[2,"Data.Number.number"],[1,0],[4]]],[4],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4],[5,"get"],[7,[[2,"Data.Number.number"],[1,0],[4]]],[4],[5,"fold"],[7,[[2,"Data.Number.-"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4]]],[4],[6,[[3,2],[14]]],[4]]],[4],[5,"toBe"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4]]],[4],[5,"it"],[7,[[2,"Data.String.string"],[1,"expect (emptyArray 1 toList length) to be 0"],[4]]],[4],[7,[[2,"Spec.Core.expect"],[2,"Data.Array.emptyArray"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4],[5,"toList"],[5,"length"],[4],[5,"toBe"],[7,[[2,"Data.Number.number"],[1,0],[4]]],[4]]],[4],[5,"it"],[7,[[2,"Data.String.string"],[1,"expect (emptyArray 1 set 0 1 toList length) to be 1"],[4]]],[4],[7,[[2,"Spec.Core.expect"],[2,"Data.Array.emptyArray"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4],[5,"set"],[7,[[2,"Data.Number.number"],[1,0],[4]]],[4],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4],[5,"toList"],[5,"length"],[4],[5,"toBe"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4]]],[4],[5,"it"],[7,[[2,"Data.String.string"],[1,"expect (emptyArray 1 set 0 1 toList length) to be 1"],[4]]],[4],[7,[[2,"Spec.Core.expect"],[2,"Data.Array.emptyArray"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4],[5,"set"],[7,[[2,"Data.Number.number"],[1,0],[4]]],[4],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4],[5,"toList"],[5,"length"],[4],[5,"toBe"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4]]],[4],[13,"done"]]]]]],[10,["modifiableAssertions",[[6,[[2,"Spec.Core.description"],[3,1],[4],[7,[[2,"Data.String.string"],[1,"Array as a modifiable"],[4]]],[4],[5,"it"],[7,[[2,"Data.String.string"],[1,"expect (emptyArray 0 set 0 1 length) to be 0"],[4]]],[4],[7,[[2,"Spec.Core.expect"],[2,"Data.Array.emptyArray"],[7,[[2,"Data.Number.number"],[1,0],[4]]],[4],[5,"set"],[7,[[2,"Data.Number.number"],[1,0],[4]]],[4],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4],[5,"length"],[4],[5,"toBe"],[7,[[2,"Data.Number.number"],[1,0],[4]]],[4]]],[4],[5,"it"],[7,[[2,"Data.String.string"],[1,"expect (emptyArray 1 set 0 1 get 0) to be (some 1)"],[4]]],[4],[7,[[2,"Spec.Core.expect"],[7,[[2,"Data.Array.emptyArray"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4],[5,"set"],[7,[[2,"Data.Number.number"],[1,0],[4]]],[4],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4],[5,"get"],[7,[[2,"Data.Number.number"],[1,0],[4]]],[4],[5,"fold"],[7,[[2,"Data.Number.-"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4]]],[4],[6,[[3,2],[14]]],[4]]],[4],[5,"toBe"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4]]],[4],[13,"done"]]]]]],[10,["immutabilityAssertions",[[6,[[2,"Spec.Core.description"],[3,1],[4],[7,[[2,"Data.String.string"],[1,"Array immutable"],[4]]],[4],[5,"it"],[7,[[2,"Data.String.string"],[1,"expect (emptyArray 0 set 0 1 length) to be 0"],[4]]],[4],[7,[[6,[[6,[[2,"Spec.Core.expect"],[7,[[3,2],[5,"get"],[7,[[2,"Data.Number.number"],[1,0],[4]]],[4],[5,"fold"],[7,[[2,"Data.Number.-"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4]]],[4],[6,[[3,4],[14]]],[4]]],[4],[5,"toBe"],[7,[[2,"Data.Number.-"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4]]],[4],[5,"&&"],[7,[[2,"Spec.Core.expect"],[7,[[3,3],[5,"get"],[7,[[2,"Data.Number.number"],[1,0],[4]]],[4],[5,"fold"],[7,[[2,"Data.Number.-"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4]]],[4],[6,[[3,4],[14]]],[4]]],[4],[5,"toBe"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4]]],[12]]],[7,[[3,2],[5,"set"],[7,[[2,"Data.Number.number"],[1,0],[4]]],[4],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4]]],[12]]],[7,[[2,"Data.Array.emptyArray"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4]]],[4]]],[4],[13,"done"]]]]]],[10,["arrayAssertions",[[6,[[2,"Spec.Core.description"],[3,1],[4],[7,[[2,"Data.String.string"],[1,"Array methods"],[4]]],[4],[5,"it"],[7,[[2,"Data.String.string"],[1,"expect (emptyArray 1 set 0 1 reset 0 get 0) to be none"],[4]]],[4],[7,[[2,"Spec.Core.expect"],[7,[[2,"Data.Array.emptyArray"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4],[5,"set"],[7,[[2,"Data.Number.number"],[1,0],[4]]],[4],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4],[5,"reset"],[7,[[2,"Data.Number.number"],[1,0],[4]]],[4],[5,"get"],[7,[[2,"Data.Number.number"],[1,0],[4]]],[4],[5,"fold"],[7,[[2,"Data.Number.-"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4]]],[4],[6,[[3,2],[14]]],[4]]],[4],[5,"toBe"],[7,[[2,"Data.Number.-"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4]]],[4]]],[4],[5,"it"],[7,[[2,"Data.String.string"],[1,"expect (emptyArray 2 set 0 1 reset 1 get 0) to be (some 1)"],[4]]],[4],[7,[[2,"Spec.Core.expect"],[7,[[2,"Data.Array.emptyArray"],[7,[[2,"Data.Number.number"],[1,2],[4]]],[4],[5,"set"],[7,[[2,"Data.Number.number"],[1,0],[4]]],[4],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4],[5,"reset"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4],[5,"get"],[7,[[2,"Data.Number.number"],[1,0],[4]]],[4],[5,"fold"],[7,[[2,"Data.Number.-"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4]]],[4],[6,[[3,2],[14]]],[4]]],[4],[5,"toBe"],[7,[[2,"Data.Number.number"],[1,1],[4]]],[4]]],[4],[13,"done"]]]]]],[10,["testSuite",[[6,[[2,"Lang.Do.do"],[7,[[2,"Data.List.List"],[5,"["],[7,[[2,"Test.Data.Array.sequenceAssertions"]]],[4],[5,";"],[7,[[2,"Test.Data.Array.modifiableAssertions"]]],[4],[5,";"],[7,[[2,"Test.Data.Array.immutabilityAssertions"]]],[4],[5,";"],[7,[[2,"Test.Data.Array.arrayAssertions"]]],[4],[5,"]"],[5,"each"],[6,[[3,2],[3,1],[12]]],[4]]],[4],[5,"return"],[7,[[2,"Data.Unit.unit"]]],[12]]]]]]],"main":[[[2,"Test.Data.Array.testSuite"],[7,[[2,"Spec.Logger.Console.consoleLogger"]]],[4]]]}