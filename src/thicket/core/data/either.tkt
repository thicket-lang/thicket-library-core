/*
 * Thicket
 * https://github.com/d-plaindoux/thicket
 *
 * Copyright (c) 2015 Didier Plaindoux
 * Licensed under the LGPL2 license.
 */

module Data.Either

type Either[a b] {
    EitherLeft  { _ : a }
    EitherRight { _ : b }
}

class either[a b] this:Either[a b] {   
    fold : [c] (a -> c) -> (b -> c) -> c
    map : [c d] (a -> c) -> (b -> d) -> either[c d]
    flatmap : [c d] (a -> either[c d]) -> (b -> either[c d]) -> either[c d]
} {
    def EitherLeft.fold l _ = l this._
    def EitherRight.fold _ r = r this._

    def map l r = 
        self fold 
            (a -> either $ EitherLeft $ l a) 
            (a -> either $ EitherRight $ r a) 
    
    def flatmap = self fold
}