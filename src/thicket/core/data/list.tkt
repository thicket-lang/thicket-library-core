/*
 * Thicket
 * https://github.com/d-plaindoux/thicket
 *
 * Copyright (c) 2015 Didier Plaindoux
 * Licensed under the LGPL2 license.
 */

module Data.List

from Data.Pair import Pair
from Data.Boolean import bool,true,false
from Data.Unit import unit
from Data.Number import number
from Data.Option import option,none,some
from Data.Comparable import Comparable
from Data.Hashable import Hashable
from Data.Collection import Collection
from Data.Monadic import Monadic
from Lang.Do import do
from Lang.Builder.Collection import *

type List[a] {
    Nil
    Cons {
        head : a
        tail : List[a]
    }
}

// Subtyping simulation using adapters

def adapter Nil2List  : [a] Nil[a] -> List[a] = a -> a
def adapter Cons2List : [a] Cons[a] -> List[a] = a -> a

/*
 * Current implementation is not efficient since foldL is not tail recursive 
 */

class list[a] this:List[a] {
    with Monadic[list a]

    unbox   : List[a]
    fold    : [b] b -> (a -> list[a] -> b) -> b
    
    each    : [b] (a -> b) -> unit

    empty   : bool
    length  : number

    reverse : list[a]
    
    (++)    : list[a] -> list[a]
    
    (+:)    : a -> list[a]
    (:+)    : a -> list[a]

    find    : (a -> bool) -> option[a]

    foldL   : [b] (b -> a -> b) -> b -> b
    foldR   : [b] (a -> b -> b) -> b -> b

    zip     : [b] list[b] -> ziplist[a b]
} {
    def unbox = this

    def Nil.fold n c = n
    def Cons.fold n c = c this.head (list this.tail)
    
    def each f = self foldL (r c -> do { f c } return r) ()

    def empty = self fold true (_ _ -> false)

    def length = self foldR (_ r -> r ++) 0

    def reverse = list $ self foldL (b a -> Cons a b) Nil

    def (++) l = 
        self empty fold l $ 
            l empty fold self $
                self foldL (r e -> list $ Cons e r.unbox) l
                
    def (+:) a = list $ Cons a this
    def (:+) a = self ++ $ list $ Cons a Nil

    def map f = self foldL (r e -> let ne = f e in list $ Cons ne r.unbox) emptyList
    def flatmap f = self foldL (r e -> (f e) ++ r) $ list Nil

    def filter p = self foldL (r e -> (p e) fold (list $ Cons e r.unbox) r) emptyList
    def find p = self filter p fold none (a _ -> some a)

    def Nil.foldL _ b = b
    def Cons.foldL f b = f (list this.tail foldL f b) this.head

    def Nil.foldR _ b = b
    def Cons.foldR f b = list this.tail foldR f $ f this.head b

    def Nil.zip l = ziplist Nil
    def Cons.zip l =
        let whenNil = ziplist Nil in
        let whenCons = head tail -> ziplist $ Cons (this.head,head) (list this.tail zip tail unbox) in
            l fold whenNil whenCons
}

class ziplist[a b] this:List[(a,b)] {
    unbox  : List[(a,b)] 
    toList : list[(a,b)] 
    unzip  : list[a],list[b]     
} {
    def unbox = this
    
    def toList = list this
    
    def Nil.unzip = emptyList,emptyList
    def Cons.unzip = 
        let tail = ziplist this.tail unzip in
            (list $ Cons this.head._1 tail._1.unbox),(list $ Cons this.head._2 tail._2.unbox)        
}

/**
 * Factory
 */

def emptyList : list = { list Nil }

def List : [a] collectionBuilder[a list[a]] = {
    collectionBuilder (list2entity emptyList)
}

/**
 * Adapters
 */

def adapter ziplist2list : [a b] ziplist[a b] -> list[(a,b)] = l -> {
    list $ l unbox
}

def adapter list2ziplist : [a b] list[(a,b)] -> ziplist[a b] = l -> {
    ziplist $ l unbox
}

def adapter list2collection : [a] list[a] -> Collection[a] = l -> {
    Collection l.find 
        (p -> list2collection $ l filter p) 
        (v -> list2collection $ l +: v) 
        (f -> list2collection $ l map f)
}
                
def adapter list2entity : [a] list[a] -> CollectionBuilder[a list[a]] = l -> {
    CollectionBuilder l (a -> list2entity $ l :+ a)
}