/*
 * Thicket
 * https://github.com/d-plaindoux/thicket
 *
 * Copyright (c) 2015 Didier Plaindoux
 * Licensed under the LGPL2 license.
 */
 
module Data.Try

from Data.Boolean import bool,true,false
from Data.String import string
from Data.Option import option,some,none
from Data.Monadic import Monadic
from Data.Unit import unit

from Logic.Combinators import combinators

type Try[a] {
    Success { _ : a }
    Failure { _ : string }
}

class try[a] this:Try[a] {  
    with Monadic[try a]

    unbox       : Try[a]
    fold        : [b] (a -> b) -> (string -> b) -> b
    
    success     : bool
    ifSuccess   : (a -> unit) -> unit
    
    recoverWith : (string -> a) -> a
} {
    def unbox = this
    
    def Failure.fold _ f = f this._
    def Success.fold s _ = s this._

    def map f = self fold (s -> success $ f s) failure
    def flatmap f = self fold f failure

    def Failure.filter _ = self
    def Success.filter p = p this._ fold self $ failure "Filter fails"
    
    def success = self fold (_ -> true) (_ -> false)
    def ifSuccess f = self fold f (_ -> ())    

    def recoverWith = self fold combinators.I
}

/**
 * Factories
 */

def success : [a] a -> try[a] = a -> { 
    try $ Success a 
}

def failure : [a] string -> try[a] = a -> { 
    try $ Failure a 
}

/**
 * Adapters
 */

def adapter try2option : [a] try[a] -> option[a] = t -> {
    t fold some (_ -> none)
}