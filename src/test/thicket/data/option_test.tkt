/*
 * Thicket
 * https://github.com/d-plaindoux/thicket
 *
 * Copyright (c) 2015-2016 Didier Plaindoux
 * Licensed under the LGPL2 license.
 */

module Test.Data.Option

import Data

import Logic.Combinators

import System.Console
import System.Runtime

import Spec.Core
import Spec.Logger.Console

def operationsAssertions : TestLogger -> unit = l -> {
    description l "Option operations"
        it "expect (some 1 present) to be true" {
            expect (some 1 present) toBe true
        }
        it "expect (some 1 orElse 0) to be 1" {
            expect (some 1 orElse 0) toBe 1
        }
        it "expect (some 1 map number::(++) orElse 0) to be 2" {
            expect (some 1 map number::(++) orElse 0) toBe 2
        }
        it "expect (none present) to be false" {
            expect (none present) toBe false
        }
        it "expect (none orElse 0) to be 0" {
            expect (none orElse 0) toBe 0
        }
        it "expect (none map number::(++) orElse 0) to be 0" {
            expect (none map number::(++) orElse 0) toBe 0
        }    
        it "expect (some 1 fold 0 combinators.I) to be 1" {
            expect (some 1 fold 0 combinators.I) toBe 1
        }
        it "expect (none fold 0 combinators.I) to be 0" {
            expect (none fold 0 combinators.I) toBe 0
        }
        it "expect (some 1 flatmap some present) to be true" {
            expect (some 1 flatmap some present) toBe true
        }
        it "expect (none flatmap some present) to be false" {
            expect (none flatmap some present) toBe false
        }
        it "expect (some 1 filter (1==) present) to be true" {
            expect (some 1 filter (1==) present) toBe true
        }
        it "expect (some 2 filter (1==) present) to be false" {
            expect (some 2 filter (1==) present) toBe false
        }
        it "expect (none filter (1==) present) to be false" {
            expect (none filter (1==) present) toBe false
        }
    done
}

def testSuite : TestLogger -> unit = logger -> {
    do {
      List[
        operationsAssertions
      ] each $ r -> r logger
    } return ()
}

testSuite consoleLogger