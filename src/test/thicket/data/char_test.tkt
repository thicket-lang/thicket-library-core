/*
 * Thicket
 * https://github.com/d-plaindoux/thicket
 *
 * Copyright (c) 2015-2016 Didier Plaindoux
 * Licensed under the LGPL2 license.
 */

module Test.Data.Character

import Data

import System.Console
import System.Runtime

import Spec.Core
import Spec.Logger.Console

def comparableAssertions : TestLogger -> TestContext = l -> {
    description l "Character as a sequence"
        it "expect ('a' == 'a') to be true" {
            expect ('a' == 'a') toBe true
        }
        it "expect (a' == b') to be false" {
            expect ('a' == 'b') toBe false
        }
    done
}

def matcherAssertions : TestLogger -> TestContext = l -> {
    description l "Character as a matcher"
        it "expect ('h' match case ('h'==) => true otherwise => false) to be true" {
            expect ('h' match case ('h'==) => true otherwise => false) toBe true
        }
        it "expect ('h' match case ('w'==) => true otherwise => false) to be false" {
            expect ('h' match case ('w'==) => true otherwise => false) toBe false
        }
    done
}

def operatorsAssertions : TestLogger -> TestContext = l -> {
    description l "Character operators"
        it "expect ('a' + 1) to be 'b'" {
            expect ('a' + 1) toBe 'b'
        }
        it "expect ('a' + 1) to be 'b'" {
            expect ('a' + 1) toBe 'b'
        }
    done
}

def specialsAssertions : TestLogger -> TestContext = l -> {
    description l "Character specials"
        it "expect ('\t' toString) to be \"<TAB>\"" {
            expect ('\t' toString) toBe "\t"
        }
        it "expect ('\n' toString) to be \"<CR>\"" {
            expect ('\n' toString) toBe "\n"
        }
        it "expect ('\0' toString) to be \"\"" {
            expect ('\0' toString) toBe "\0"
        }
    done
}

def testSuite : TestLogger -> unit = logger -> {
    do {
      List[
        comparableAssertions;
        matcherAssertions;
        operatorsAssertions;
        specialsAssertions
      ] each $ r -> r logger
    } return ()
}

testSuite consoleLogger