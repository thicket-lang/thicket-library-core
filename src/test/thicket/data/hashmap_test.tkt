/*
 * Thicket
 * https://github.com/d-plaindoux/thicket
 *
 * Copyright (c) 2015-2016 Didier Plaindoux
 * Licensed under the LGPL2 license.
 */

module Test.Data.Hashmap

import Data

import System.Console
import System.Runtime

import Spec.Core
import Spec.Logger.Console

def emptyHashmapAssertions : TestLogger -> TestContext = l -> {
    description l "Fresh hashmap"
        it "expect (newHashmap empty) to be true" {
            expect (newHashmap empty) toBe true
        }
        it "expect (newHashmap find 1) to be none" {
            expect (newHashmap find 1 present) toBe false
        }
    done
}

def notEmptyHashmapAssertions : TestLogger -> TestContext = l -> {
    description l "Managin hashmap"
        it "expect (newHashmap add 1 2 empty) to be false" {
            expect (newHashmap add 1 2 empty) toBe false
        }
        it "expect (newHashmap add 1 2 find 1) to be (some 2)" {
            expect (newHashmap add 1 2 find 1 fold (-1) (i -> i)) toBe 2
        }
        it "expect (newHashmap add 1 2 add 1 3 find 1) to be (some 3)" {
            expect (newHashmap add 1 2 add 1 3 find 1 fold (-1) (i -> i)) toBe 3
        }
        it "expect (newHashmap add 1 2 remove 1 find 1) to be (none)" {
            expect (newHashmap add 1 2 remove 1 find 1 present) toBe false
        }
        it "expect (newHashmap add 1 2 add 1 3 remove 1 find 1) to be (none)" {
            expect (newHashmap add 1 2 add 1 3 remove 1 find 1 present) toBe false
        }
    done
}


def hashmapBuilderAssertions : TestLogger -> TestContext = l -> {
    description l "Building hashmap"
        it "expect (Hashmap[1=>2] empty) to be false" {
            expect (Hashmap[1=>2] empty) toBe false
        }
        it "expect (Hashmap[1=>2] find 1) to be (some 2)" {
            expect (Hashmap[1=>2] find 1 fold (-1) (i -> i)) toBe 2
        }
        it "expect (Hashmap[1=>2;1=>3] find 1) to be (some 3)" {
            expect (Hashmap[1=>2;1=>3] find 1 fold (-1) (i -> i)) toBe 3
        }
        it "expect (Hashmap[1=>2] remove 1 find 1) to be (none)" {
            expect (Hashmap[1=>2] remove 1 find 1 present) toBe false
        }
        it "expect (Hashmap[1=>2;1=>3] remove 1 find 1) to be (none)" {
            expect (Hashmap[1=>2;1=>3] remove 1 find 1 present) toBe false
        }
    done
}

def testSuite : TestLogger -> unit = logger -> {
    do {
      List[
        emptyHashmapAssertions;
        notEmptyHashmapAssertions;
        hashmapBuilderAssertions
      ] each $ r -> r logger
    } return ()
}

testSuite consoleLogger