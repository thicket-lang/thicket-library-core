/*
 * Thicket
 * https://github.com/d-plaindoux/thicket
 *
 * Copyright (c) 2015-2016 Didier Plaindoux
 * Licensed under the LGPL2 license.
 */

module Test.Data.Number

import Data

import System.Console
import System.Runtime

import Spec.Core
import Spec.Logger.Console

def operationAssertions : TestLogger -> TestContext = l -> {
    description l "Number operations"
        it "expect 2+4 to be 6" {
            expect (2+4) toBe 6
        }
        it "expect 2-4 to be -2" {
            expect (2-4) toBe (-2)
        }
        it "expect 2*4 to be 8" {
            expect (2*4) toBe 8
        }
        it "expect 2/4 to be 0.5" {
            expect (2/4) toBe 0.5
        }
        it "expect 2/4 to be 0.5" {
            expect (2/4) toBe 0.5
        }
        it "expect 3%2 to be 1" {
            expect (3%2) toBe 1
        }
        it "expect 2|1 to be 3" {
            expect (2|1) toBe 3
        }        
        it "expect 2-- to be 1" {
            expect (2--) toBe 1
        }        
        it "expect 2++ to be 3" {
            expect (2++) toBe 3
        }        
        it "expect 3&1 to be 1" {
            expect (3&1) toBe 1
        }        
        it "expect 2<<1 to be 4" {
            expect (2<<1) toBe 4
        }        
        it "expect 4>>1 to be 2" {
            expect (4>>1) toBe 2
        }        
        it "expect 1..3 length to be 3" {
            expect (1..3 length) toBe 3
        }        
        it "expect 1 to 3 fold 0 number::(+) to be 6" {
            expect (1 to 3 fold 0 number::(+)) toBe 6
        }        
        it "expect 3 downto 1 fold 0 number::(+) to be 6" {
            expect (3 downto 1 fold 0 number::(+)) toBe 6
        }        
        it "expect 3 toString to be \"3\"" {
            expect (3 toString) toBe "3"
        }        
        it "expect 3.toString to be \"3\"" {
            expect (3.toString) toBe "3"
        }        
    done 
}

def dottedOperationAssertions : TestLogger -> TestContext = l -> {
    description l "Number dotted operations"
        it "expect 2.(+) 4 to be 6" {
            expect (2.(+) 4) toBe 6
        }
        it "expect 3.toString to be \"3\"" {
            expect (3.toString) toBe "3"
        }        
    done 
}        
        
def predicateAssertions : TestLogger -> TestContext = l -> {
    description l "Number predicates"
        it "expect 2==2 to be true" {
            expect (2==2) toBe true
        }
        it "expect 2==3 to be false" {
            expect (2==3) toBe false
        }
        it "expect 2<?2 to be false" {
            expect (2<?2) toBe false
        }
        it "expect 2<?3 to be true" {
            expect (2<?3) toBe true
        }
        it "expect (3 match case (3==) => true otherwise => false) to be true" {
            expect (3 match case (3==) => true otherwise => false) toBe true
        }
        it "expect (3 match case (4==) => true otherwise => false) to be false" {
            expect (3 match case (4==) => true otherwise => false) toBe false
        }
    done 
}

def testSuite : TestLogger -> unit = logger -> {
    do {
      List[
        operationAssertions;
        dottedOperationAssertions;
        predicateAssertions
      ] each $ r -> r logger
    } return ()
}

testSuite consoleLogger