/*
 * Thicket
 * https://github.com/d-plaindoux/thicket
 *
 * Copyright (c) 2015-2016 Didier Plaindoux
 * Licensed under the LGPL2 license.
 */
 
module Data.Option

from Data.Boolean import bool,true,false
from Data.Try import try,failure,success
from Data.String import string
from Data.Monadic import Monadic
from Data.Unit import unit

from Logic.Combinators import combinators

type Option[a] {
    model None
    model Some { _ : a }
}

class option[a] this:Option[a] {
    with Monadic[option,a]
    
    unbox     : Option[a]
    fold      : [b] b -> (a -> b) -> b
    cata      : [b] (None[a] -> b) -> (Some[a] -> b) -> b
    present   : bool
    ifPresent : (a -> unit) -> unit
    orElse    : a -> a
} {
    def unbox = this
    
    def None.fold n _ = n
    def Some.fold _ s = s this._

    def None.cata n _ = n this
    def Some.cata _ s = s this

    def map f = self fold none (s -> some $ f s)
    def flatmap f = self fold none f
    def filter p = self fold self $ s -> p s fold self none

    def present = self fold false (combinators.K true)    
    def ifPresent = self fold ()
    
    def orElse a = self fold a combinators.I
} 

/**
 * Factories
 */

def some : [a] a -> option[a] = e -> { option $ Some e }
def none : option = { option None }

/**
 * Adapters
 */

def adapter option2try : [a] option[a] -> try[a] = t -> {
    t fold (failure "Undefined value") success
}