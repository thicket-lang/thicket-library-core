/*
 * Thicket
 * https://github.com/d-plaindoux/thicket
 *
 * Copyright (c) 2015-2016 Didier Plaindoux
 * Licensed under the LGPL2 license.
 */
 
module Data.Hashmap

from Data.Number import number
from Data.Boolean import bool,true
from Data.Option import option
from Data.Pair import Pair
from Data.List import List,list,emptyList,ziplist,list2collection
from Data.Comparable import Comparable
from Data.Collection import Collection
from Data.Array import array,emptyArray
from Data.Map import Map

from Lang.Builder.Map import *

from Standard.Math import math

typedef Hashmap[k,v] = array[list[(k,v)]] 

class hashmap[k,v] this:Hashmap[k,v] {
  unbox   : Hashmap[k,v]
 
  empty   : bool
 
  find    : Comparable[k] -> option[v]
  add     : Comparable[k] -> v -> hashmap[k,v]
  remove  : Comparable[k] -> hashmap[k,v]
  
  keys    : Collection[k]
  values  : Collection[v]
  entries : Collection[(k,v)]
} {
  // Private behaviors

  def getIndex : Comparable[k] -> number = c -> 
    c hashable hash % this.length

  def toList : list[(k,v)] = this foldR (l r -> l ++ r) emptyList

  def toLists : list[k],list[v] = ziplist (self toList unbox) unzip

  def removeFromList : Comparable[k] -> (number,list[(k,v)])= c ->
    let index = self getIndex c in
    let cleanup = l -> l filter (e -> c != e._1) in
        index,(this get index fold emptyList cleanup)

  // Public behaviors

  def unbox = this
  
  def empty = this foldR (e r -> r && $ e empty) true

  def find c = 
    let index = self getIndex c in
    let retrieve = l -> l find (e -> c == e._1) map (e -> e._2) in
          this get index flatmap retrieve

  def add c v = 
    let indexNentries = self removeFromList c in
          hashmap $ this set indexNentries._1 $ indexNentries._2 +: ((c unbox),v)          
          
  def remove c =
    let indexNentries = self removeFromList c in
        hashmap $ indexNentries._2 empty fold
                        { this reset indexNentries._1 }
                        { this set indexNentries._1 indexNentries._2 } 

  def keys = list2collection $ self toLists _1           
  def values = list2collection $ self toLists _2        
  def entries = list2collection $ self toList
}   

/**
 * Factory
 */

def newSizedHashmap : [k,v] number -> hashmap[k,v] = n -> {
    hashmap $ emptyArray $ math.max 128 n
}

def newHashmap : hashmap = { newSizedHashmap 256 }

def Hashmap : [a,b] mapBuilder[a,b,hashmap[a,b]] = {
    mapBuilder (map2builder newHashmap)
}

def map2builder : [a,b] hashmap[a,b] -> MapBuilder[a,b,hashmap[a,b]] = l -> {
    MapBuilder l (a b -> map2builder $ l add a b)
}

//
// Adapters
//

def adapter hashmap2map : [k,v] hashmap[k,v] -> Map[k,v] = h -> {
    Map h.find (c v -> hashmap2map $ h.add c v) (_ -> h.keys) (_ -> h.values) (_ -> h.entries)
}
