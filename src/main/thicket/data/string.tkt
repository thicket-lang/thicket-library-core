/*
 * Thicket
 * https://github.com/d-plaindoux/thicket
 *
 * Copyright (c) 2015-2016 Didier Plaindoux
 * Licensed under the LGPL2 license.
 */
 
module Data.String

from System.Internal import internal

from Data.Boolean import bool,true,false
from Data.Native import native
from Data.Number import number
from Data.Character import char
from Data.Boolean import bool, true, false
from Data.Option import option,none,some
from Data.Comparable import comparable
from Data.Hashable import hashable
from Data.Matcher import matcher
from Data.Sequence import sequence, modifiable
from Data.List import emptyList, list
from Data.Array import emptyArray, array
from Lang.When import when

class string this:native {
    with comparable[string]
    with hashable[string]
    with matcher[string]
    with sequence[char]
    with modifiable[char,string]
        
    get : number -> option[char]
    set : number -> char -> string

    (+) : string -> string   
    (*) : number -> string    
    
    subStringAt : sequence[char] -> number -> bool
    
    toNumber : option[number] 
    
    toUpper : string
    toLower : string
} {
    def unbox = self

    def (==) n = internal "generic.==" self n true false
    def (<?) n = internal "generic.<" self n true false
    
    def hash = number $ internal "string.hash" self

    def get n = internal "string.getAt" self n (n -> some $ char n) none
    def set n v = string $ internal "string.setAt" self n v
    
    def (+) s = string $ internal "string.+" self s
    def (*) n = 1 to n fold "" (r _ -> self + r)
    
    def length = number $ internal "string.length" self    
                
    def subStringAt = self subSequenceAt
        
    def toNumber = internal "string.toNumber" self (n -> some $ number n) none

    def toLower = self toList map char::toUpper mkString char::toString ""
    def toUpper = self toList map char::toUpper mkString char::toString ""
}

/**
 * Adapters
 */

def adapter string2number : string -> option[number] = string::toNumber
def adapter string2array  : string -> array[char]    = string::toArray
def adapter string2list   : string -> list[char]     = string::toList
