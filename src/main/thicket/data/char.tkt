/*
 * Thicket
 * https://github.com/d-plaindoux/thicket
 *
 * Copyright (c) 2015-2016 Didier Plaindoux
 * Licensed under the LGPL2 license.
 */
 
module Data.Character

from System.Internal import internal
from Data.Native import native
from Data.Number import number
from Data.String import string
from Data.Boolean import true,false
from Data.Comparable import comparable
from Data.Hashable import hashable
from Data.Matcher import matcher
from Data.Additionable import additionable

from Lang.Switch import switch

class char this:native {
    with comparable[char]
    with hashable[char]
    with additionable[char]
    with matcher[char]
    
    toString : string
    toNumber : number
} {
    def unbox = self

    def hash = self toString hash

    def (==) n = internal "generic.==" self n true false
    def (<?) n = internal "generic.<" self n true false
    
    def (+) n = char $ internal "char.+" self n
    
    def toString = string this
    def toNumber = number $ internal "char.toNumber" self
}

def eol : char = '\n'

/**
 * Adapter
 */
 
def adapter char2string : char -> string = char::toString
def adapter char2number : char -> number = char::toNumber
