/*
 * Thicket
 * https://github.com/d-plaindoux/thicket
 *
 * Copyright (c) 2015 Didier Plaindoux
 * Licensed under the LGPL2 license.
 */
 
module Data.Char

from System.Internal import internal
from Data.Native import native
from Data.Number import number
from Data.String import string
from Data.Boolean import true,false
from Data.Comparable import comparable
from Data.Hashable import hashable
from Data.Matcher import Matcher
from Data.Additionable import additionable

from Lang.Switch import switch

class char this:native {
    with comparable[char]
    with hashable[char]
    with additionable[char]
    with Matcher[char]
    
    toString : string
} {
    def hash = self toString hash

    def (==) n = internal "generic.==" self n true false
    def (<?) n = internal "generic.<" self n true false
    
    def (+) n = char $ internal "char.+" self n
    
    def toString = string this
    
    def match = switch self
}

def eol : char = '\n'

/**
 * Adapters
 */
 
def adapter char2string : char -> string = char::toString
