/*
 * Thicket
 * https://github.com/d-plaindoux/thicket
 *
 * Copyright (c) 2015-2016 Didier Plaindoux
 * Licensed under the LGPL2 license.
 */
 
module Data.Array

from Logic.Combinators import combinators

from Data.Unit import unit
from Data.String import string
from Data.Boolean import bool
from Data.Native import native
from Data.Number import number
from Data.Option import option,some,none
from Data.Sequence import sequence, modifiable

from Lang.Do import do

from Standard.Math import math

from System.Internal import internal

/*
 * Immutable array version
 */

class array[a] this:native {
    with sequence[a]
    with modifiable[a,array[a]]

    reset  : number -> array[a]
    
    map    : [b] (a -> b) -> array[b]

    each   : [b] (a -> b) -> unit

    foldL  : [b] (b -> a -> b) -> b -> b
    foldR  : [b] (a -> b -> b) -> b -> b
} {
    def set i a = array $ internal "array.set" self i a
    def reset i = array $ internal "array.reset" self i
    def get i = internal "array.get" self i some none
    
    def length = number $ internal "array.size" self

    def map f = 
        let update = r i -> self get i fold r { a -> r set i $ f a } in
            0 to (self.length --) fold (emptyArray self.length) update
            
    def each f = 
        0 to (self.length --) fold () (r i -> self get i fold r $ a -> do {f a} return r)
         
    def foldL f r = 
        0 to (self.length --) fold r (r i -> self get i fold r $ f r)

    def foldR f r = 
        (self.length --) downto 0 fold r (r i -> self get i fold r $ combinators.C f r)       
}

/**
 * Empty array constructor
 */

def emptyArray : [a] number -> array[a] = n -> {     
    array $ internal "array.new" $ math max 0 n
}
