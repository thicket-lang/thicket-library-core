/*
 * Thicket
 * https://github.com/d-plaindoux/thicket
 *
 * Copyright (c) 2015-2016 Didier Plaindoux
 * Licensed under the LGPL2 license.
 */
 
module Data.Try

from Data.Boolean import bool,true,false
from Data.String import string
from Data.Option import option,some,none
from Data.Monadic import Monadic
from Data.Unit import unit

from Standard.Function import function

from System.Error import Error, error
from Logic.Combinators import combinators

type Try[a] {
    Success { _ : a }
    Failure { _ : Error }
} 

class try[a] this:Try[a] {  
    with Monadic[try,a]

    unbox       : Try[a]
    fold        : [b] (a -> b) -> (Error -> b) -> b
    cata        : [b] (Success[a] -> b) -> (Failure[a] -> b) -> b
    
    success     : bool
    ifSuccess   : (a -> unit) -> unit
    
    recoverWith : (Error -> a) -> a
} {
    def unbox = this
    
    def Failure.fold _ f = f this._
    def Success.fold s _ = s this._
    
    def Failure.cata _ f = f this
    def Success.cata s _ = s this

    def map f = self fold (combinators.B success f) failsWithError
    def flatmap f = self fold f failsWithError

    def Failure.filter _ = self
    def Success.filter p = p this._ fold self $ failure "Filter fails"
    
    def success = self fold (combinators.K true) (combinators.K false)
    def ifSuccess f = self fold f $ combinators.K ()

    def recoverWith = self fold combinators.I
}

/**
 * Factories
 */

def success : [a] a -> try[a] = a -> { try $ Success a }
def failsWithError : [a] Error -> try[a] = a -> { try $ Failure a }
def failure : [a] string -> try[a] = a -> { failsWithError $ error a }

def lift : [a,b] (a -> b) -> try[a] -> try[b] = f a -> {
    a fold (a -> success $ f a) failsWithError
}

/**
 * Adapters
 */

def adapter try2option : [a] try[a] -> option[a] = t -> {
    t fold some $ combinators.K none
}
