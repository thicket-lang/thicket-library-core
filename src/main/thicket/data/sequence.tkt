/*
 * Thicket
 * https://github.com/d-plaindoux/thicket
 *
 * Copyright (c) 2015-2016 Didier Plaindoux
 * Licensed under the LGPL2 license.
 */
 
module Data.Sequence

from Data.Array import emptyArray, array
from Data.Boolean import bool, false, true
from Data.Comparable import Comparable
from Data.List import emptyList, list
from Data.Number import number
from Data.Option import option, some , none

from Lang.When import when

//
// Models definition
//

model Sequence[a] {
    empty         : bool
    definedAt     : number -> bool
    indexOf       : Comparable[a] -> option[number]
    lastIndexOf   : Comparable[a] -> option[number]
    subSequenceAt : Sequence[Comparable[a]] -> number -> bool
    length        : number
    get           : number -> option[a]
    toArray       : array[a]
    toList        : list[a]
}

model Modifiable[a,t] {
    set : number -> a -> t
}

//
// Traits definition
//

model IndexOfContext[a] {
    search : Comparable[a]
    last   : number -> bool
    next   : number -> number
}

trait sequence[a] {
    with Sequence[a]
} {
    def empty = self length == 0

    def definedAt i = 
        self get i fold false (_ -> true)
        
    def _indexOf_ : IndexOfContext[a] -> number -> option[number] = context i ->
        when (context last i)
        then none
        else $ self get i flatmap 
             $ b -> when (context.search == b)
                    then { some i }
                    else { self _indexOf_ context (context next i) }             
        
    def indexOf a = 
        self _indexOf_ (IndexOfContext a (self.length==) number::(++)) 0

    def lastIndexOf a = 
        self _indexOf_ (IndexOfContext a (0?>) number::(--)) (self.length--)
        
    def subSequenceAt s offset =
        0 to (s.length--) fold 
            (some true)
            (r i -> 
                for _  <- r
                    c1 <- { s get i }
                    c2 <- { self get $ offset + i }
                if (c1 == c2)
                yield true) 
            orElse false

    def toArray = 
        let update = r i -> self get i fold r (r set i) in
            0 to (self.length--) fold (emptyArray self.length) update
    
    def toList = 
        let update = l i -> self get i fold l (l+:) in
            (self.length--) downto 0 fold emptyList update
}

trait modifiable[a,t] {
    with Modifiable[a,t]
}

