/*
 * Thicket
 * https://github.com/d-plaindoux/thicket
 *
 * Copyright (c) 2015-2016 Didier Plaindoux
 * Licensed under the LGPL2 license.
 */
 
module Data.Sequence

from Data.Number import number
from Data.Boolean import bool, false, true
from Data.Option import option, some , none
from Data.Comparable import Comparable
from Data.List import emptyList, list
from Lang.When import when

//
// Models definition
//

model Sequence[a] {
    isEmpty       : bool
    isDefinedAt   : number -> bool
    indexOf       : Comparable[a] -> option[number]
    lastIndexOf   : Comparable[a] -> option[number]
    length        : number
    get           : number -> option[a]
    toList        : list[a]
    subSequenceAt : Sequence[Comparable[a]] -> number -> bool
}

model Modifiable[a,t] {
    set : number -> a -> t
}

//
// Traits definition
//

trait sequence[a] {
    with Sequence[a]
} {
    def isEmpty = self length == 0

    def isDefinedAt i = 
        self get i fold false (_ -> true)
        
    def _indexOf_ : Comparable[a] -> number -> (number -> bool) -> (number -> number) -> option[number] = a i last next ->
        when (last i)
        then none
        else $ self get i flatmap 
             $ b -> when (a==b)
                    then { some i }
                    else { self _indexOf_ a (next i) last next }             
        
    def indexOf a = 
        self _indexOf_ a 0 (self.length==) (i -> i++)

    def lastIndexOf a = 
        self _indexOf_ a (self.length--) (0==) (i -> i--)
        
    def subSequenceAt s offset =
        0 to (s.length--) fold 
            (some true)
            (r i -> 
                for _  <- r
                    c1 <- { s get i }
                    c2 <- { self get $ offset + i }
                if (c1 == c2)
                yield true) 
            orElse false
        
    def toList = 
        (self.length--) downto 0 fold emptyList $ c i -> self get i fold c (c+:)        
}

trait modifiable[a,t] {
    with Modifiable[a,t]
}

