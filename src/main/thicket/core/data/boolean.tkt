/*
 * Thicket
 * https://github.com/d-plaindoux/thicket
 *
 * Copyright (c) 2015 Didier Plaindoux
 * Licensed under the LGPL2 license.
 */

module Data.Boolean

from Data.String import string
from Data.Number import number
from Data.Comparable import Comparable
from Data.Hashable import Hashable

/*
 * Boolean definition as an injective type domain
 * defining two models True and False
 */

type Bool { True False }

/** 
 * A boolean class denotation
 */

class bool this:Bool {
    unbox    : Bool
    
    fold     : [a] a -> a -> a
    
    and      : bool -> bool
    or       : bool -> bool
    imply    : bool -> bool
    not      : bool
    (&&)     : bool -> bool
    (||)     : bool -> bool
    (=>)     : bool -> bool
    
    toString : string
    
    (==)     : bool -> bool
    (!=)     : bool -> bool
} {
    def unbox = this

    def True.fold  t _ = t
    def False.fold _ f = f

    def and l   = self fold l false
    def or l    = self fold self l
    def imply l = self not || l
    def not     = self fold false true
    
    def (&&) = self and
    def (||) = self or
    def (=>) = self imply
    
    def toString = self fold "true" "false"
    
    def (==) b = self fold b (b not)    
    def (!=) b = (self == b) not
}

/**
 * Factories
 */

def true  : bool = { bool True  }
def false : bool = { bool False }

/**
 * Adapters
 */

def adapter bool2hashable : bool -> Hashable[bool] = this -> {
    Hashable this (this fold 7 13)
}

def adapter bool2comparable : bool -> Comparable[bool] = this -> {
    Comparable 
        this 
        (b -> this fold b b.not) 
        (b -> this fold b.not b)
        (b -> this fold b.not b)
        (b -> this fold b b.not)
        (b -> this fold b.not b)
        (b -> this fold b b.not)
        (bool2hashable this)
}
