/*
 * Thicket
 * https://github.com/d-plaindoux/thicket
 *
 * Copyright (c) 2015-2016 Didier Plaindoux
 * Licensed under the LGPL2 license.
 */

module Lang.Range

from System.Internal import internal

from Lang.Strict import strict

from Data.String import string
from Lang.When import when
from Data.Pair import Pair
from Data.Number import number
from Data.Boolean import bool
from Data.Unit import unit

model Range[a] {
    fold : [b] b -> (b -> a -> b) -> b
}
 
/* 
class abstractRange[a] this:(Additionable[a],Additionable[a]) {
    fold : [b] (a -> a -> bool) -> (number -> a) -> b -> (b -> a -> b) -> b
} {
    def fold pred dep r f =
        when (pred this._1 this._2) 
        then { 
            let nr = strict (f r) this._1 in
            let nextRange = (dep this._1), this._2 in        
                abstractRange nextRange fold pred dep nr f
        }
        else r
}

class stepByRange this:(number,number) {
    step : number -> Range
} {
    def step i =
        Range $
            (when { i <? 0 }
             then { abstractRange this fold number::(=>) (i +) }
             else { abstractRange this fold number::(<=) (i +) })
}
*/

class stepByRange this:(number,number) {
    step : number -> Range[number]
} {
    def step i = Range $ r f -> internal "range.fold" this._1 this._2 i r f number
}

def foreach : (number,number) -> stepByRange = stepByRange
