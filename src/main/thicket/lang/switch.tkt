
/*
 * Thicket
 * https://github.com/d-plaindoux/thicket
 *
 * Copyright (c) 2015-2016 Didier Plaindoux
 * Licensed under the LGPL2 license.
 */
 
module Lang.Switch
 
from Data.Boolean import bool
from Data.Comparable import Comparable
 
/* 
 * Language syntactic extension
 * 
 *     switch e
 *     case c1   => e1 
 *     case c2   => e2 
 *     otherwise => e3
 */

model SwitchModel[a,b] {
    case      : (a -> bool) -> CaseModel[a,b]
    otherwise : CaseOtherwise[b]
}

model CaseModel[a,b] {
    (=>) : b -> SwitchModel[a,b]
}

model CaseOtherwise[b] {
    (=>) : b -> b
}

// ------------------------

trait switchTrait[a,b] {
    with SwitchModel[a,b]
    toModel : SwitchModel[a,b]
} {
    def toModel = SwitchModel self.case self.otherwise
}

trait caseTrait[a,b] {
    with CaseModel[a,b]
    toModel : CaseModel[a,b]
} {
    def toModel = CaseModel self.(=>)
}

// ------------------------

class switch[a,b] this:a {
    with switchTrait[a,b]
} {
    def case a    = a this fold (caseTrue (i -> i) toModel) (caseFalse this toModel)
    def otherwise = CaseOtherwise (b -> b)
}

class switchTrue[a,b] this:b {
    with switchTrait[a,b]
} {
    def case _    = caseTrue (_ -> this) toModel
    def otherwise = CaseOtherwise (_ -> this)
}

class caseTrue[a,b] this:(b -> b) {
    with caseTrait[a,b] 
} {
    def (=>) b = switchTrue (this b) toModel
}

class caseFalse[a,b] this:a {
    with caseTrait[a,b]
} {
    def (=>) _ = switch this toModel
}
